# Claude Code Hooks Configuration
# このファイルはプロジェクト固有の自動化を定義します

hooks:
  # セキュリティ: 危険なコマンドの事前チェック
  - event: PreToolUse
    matcher:
      tool: Bash
    command: |
      # セキュリティバリデーターによる事前チェック
      echo "🔒 セキュリティチェック実行中..." >&2
      python3 .claude/scripts/bash_security_validator.py

  # セキュリティ強化: 高リスクコマンドの詳細チェック
  - event: PreToolUse
    matcher:
      tool: Bash
    command: |
      if echo "$CLAUDE_COMMAND" | grep -E "(rm -rf|sudo|curl.*-X|wget.*-O)" >/dev/null 2>&1; then
        echo "⚠️  高リスクコマンド検出: $CLAUDE_COMMAND" >&2
        echo "$(date '+%Y-%m-%d %H:%M:%S') [HIGH-RISK] $CLAUDE_COMMAND" >> .claude/logs/security.log
        # 5秒待機（キャンセル可能）
        sleep 5 || true
      fi

  # コミット前自動フォーマット
  - event: PreToolUse
    matcher:
      tool: Bash
      command_contains: "git commit"
    command: |
      if command -v prettier >/dev/null 2>&1 && [ -f .prettierrc ]; then
        echo "✨ コミット前自動フォーマット実行中..."
        # ステージされたファイルのみフォーマット
        git diff --cached --name-only --diff-filter=ACM | xargs prettier --write 2>/dev/null || true
        # フォーマット後に再ステージング
        git add -u 2>/dev/null || true
      fi

  # セキュリティ: コマンド実行ログの記録
  - event: PostToolUse
    matcher:
      tool: Bash
    command: |
      # コマンド実行ログを記録
      LOG_FILE=".claude/logs/command_history.log"
      mkdir -p "$(dirname "$LOG_FILE")"
      TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')
      echo "[$TIMESTAMP] [$CLAUDE_EXIT_CODE] $CLAUDE_COMMAND" >> "$LOG_FILE"
      
      # 危険なコマンドの実行を特別にログ記録
      if echo "$CLAUDE_COMMAND" | grep -E "(sudo|rm|chmod|curl|wget|git config --global)" >/dev/null 2>&1; then
        echo "[$TIMESTAMP] [SECURITY-ALERT] Potentially dangerous command executed: $CLAUDE_COMMAND" >> .claude/logs/security.log
      fi

  # コード品質の自動チェック
  - event: PostToolUse
    matcher:
      tool: [Edit, Write, MultiEdit]
      glob: "*.{js,ts,jsx,tsx,py}"
    command: |
      # コード変更をログに記録（必要に応じて有効化）
      # echo "[$(date '+%Y-%m-%d %H:%M')] コード変更: $CLAUDE_FILE_PATHS" >> .claude/logs/changes.log
      # 言語別の品質チェック（存在するコマンドのみ実行）
      if command -v npm >/dev/null 2>&1 && [ -f package.json ]; then
        npm run lint --if-present
        npm run typecheck --if-present
      elif command -v python >/dev/null 2>&1 && [ -f requirements.txt ]; then
        python -m flake8 $CLAUDE_FILE_PATHS 2>/dev/null || true
        python -m mypy $CLAUDE_FILE_PATHS 2>/dev/null || true
      fi

  # 依存関係自動更新チェック（軽量版）
  - event: PostToolUse
    matcher:
      tool: [Edit, Write]
      glob: "package.json"
    command: |
      if command -v npm >/dev/null 2>&1; then
        echo "📦 package.json更新を検出"
        # 軽量チェック：依存関係の構文確認のみ
        npm ls --depth=0 --silent 2>/dev/null || echo "⚠️  依存関係に問題がある可能性があります"
      fi

  # テスト成功時の自動記録
  - event: PostToolUse
    matcher:
      tool: Bash
      command_contains: "test"
    command: |14
      if [ $CLAUDE_EXIT_CODE -eq 0 ]; then
        echo "### $(date '+%Y-%m-%d %H:%M') - テスト成功" >> .claude/context/history.md
        echo "- コマンド: $CLAUDE_COMMAND" >> .claude/context/history.md
        echo "" >> .claude/context/history.md
      fi

  # 新機能追加時の記録
  - event: PostToolUse
    matcher:
      tool: [Write, MultiEdit]
      glob: "*.{js,ts,jsx,tsx,py}"
    command: |
      # 新しいファイルが作成された場合
      if [ "$CLAUDE_TOOL" = "Write" ]; then
        # 新機能追加をログに記録（必要に応じて有効化）
        # echo "### $(date '+%Y-%m-%d') - 新機能追加: $CLAUDE_FILE_PATHS" >> .claude/logs/features.log
      fi

  # git操作の自動記録
  - event: PostToolUse
    matcher:
      tool: Bash
      command_contains: "git commit"
    command: |
      if [ $CLAUDE_EXIT_CODE -eq 0 ]; then
        # コミットをログに記録（必要に応じて有効化）
        # echo "### $(date '+%Y-%m-%d %H:%M') - コミット" >> .claude/logs/commits.log
        # echo "$CLAUDE_OUTPUT" >> .claude/logs/commits.log
      fi

  # Memory Bank 2.0: 最適化されたMarkdown同期
  - event: PostToolUse
    matcher:
      tool: [Edit, Write, MultiEdit]
      glob: ".claude/**/*.md"
    command: |
      # 最適化されたインクリメンタル同期
      if command -v python3 >/dev/null 2>&1; then
        echo "📝 Memory Bankインクリメンタル同期中..."
        python3 .claude/index/sync_markdown.py incremental "$CLAUDE_FILE_PATHS"
      fi

  # Phase 3: AI生成コード品質モニター
  - event: PostToolUse
    matcher:
      tool: [Write, Edit]
      glob: "*.py"
    command: |
      # Pythonファイル変更時に重複チェック
      if command -v python3 >/dev/null 2>&1 && [ -f .claude/quality/code_monitor.py ]; then
        echo "🔍 コード品質チェック中..."
        python3 .claude/quality/code_monitor.py check "$CLAUDE_FILE_PATHS" || true
      fi

  # Phase 3: 知識自動整理（週1回）
  - event: SessionStart
    command: |
      # 最後の整理から7日経過していたら実行
      if [ ! -f .claude/index/.last_organize ] || \
         [ $(find .claude/index/.last_organize -mtime +7 2>/dev/null | wc -l) -gt 0 ]; then
        if command -v python3 >/dev/null 2>&1 && [ -f .claude/index/auto_organize.py ]; then
          echo "🗂️  知識ベース整理中..."
          python3 .claude/index/auto_organize.py organize >/dev/null 2>&1 || true
          touch .claude/index/.last_organize
        fi
        
        # セッション開始時のスマート同期
        if command -v python3 >/dev/null 2>&1; then
          echo "📝 セッション開始時のスマート同期..."
          python3 .claude/index/sync_markdown.py smart >/dev/null 2>&1 || true
        fi
      fi

  # バッチ処理（MultiEdit時の効率化）
  - event: PostToolUse
    matcher:
      tool: [MultiEdit]
    command: |
      echo "🔄 MultiEdit後バッチ処理実行中..."
      # 順次実行でエラーを個別にハンドリング
      if command -v npm >/dev/null 2>&1 && [ -f package.json ]; then
        npm run lint --if-present --silent 2>/dev/null || echo "lint: 警告あり"
        npm run typecheck --if-present --silent 2>/dev/null || echo "typecheck: 警告あり"
      fi
      if command -v python3 >/dev/null 2>&1 && [ -f .claude/quality/code_monitor.py ]; then
        python3 .claude/quality/code_monitor.py check "$CLAUDE_FILE_PATHS" 2>/dev/null || echo "code_monitor: 警告あり"
      fi
      
      # MultiEdit後のMemory Bankバッチ同期
      if echo "$CLAUDE_FILE_PATHS" | grep -q ".claude.*\.md"; then
        if command -v python3 >/dev/null 2>&1; then
          echo "📝 Memory Bankバッチ同期中..."
          python3 .claude/index/sync_markdown.py batch "$CLAUDE_FILE_PATHS"
        fi
      fi

  # Phase 3: コードファイル品質チェック（軽量版）
  - event: PostToolUse
    matcher:
      tool: [Write, Edit]
      glob: "*.{js,ts,jsx,tsx}"
    command: |
      # JavaScript/TypeScriptファイル変更時の簡易チェック
      if command -v python3 >/dev/null 2>&1 && [ -f .claude/quality/code_monitor.py ]; then
        python3 .claude/quality/code_monitor.py check "$CLAUDE_FILE_PATHS" | grep -E "(duplicate_found|suggestions)" || true
      fi
      
  # Memory Bank 2.0: 重要ファイルのスマート同期
  - event: PostToolUse
    matcher:
      tool: [Edit, Write, MultiEdit]
      glob: ".claude/{core,context,debug}/*.md"
    command: |
      # 重要なファイルのみスマート同期
      if command -v python3 >/dev/null 2>&1; then
        echo "📝 Memory Bankスマート同期中..."
        python3 .claude/index/sync_markdown.py smart "$CLAUDE_FILE_PATHS"
      fi
      
  # Memory Bank 2.0: 日次統計レポート（任意）
  - event: SessionStart
    command: |
      # 日次統計レポートを生成（サイレントモード）
      if command -v python3 >/dev/null 2>&1 && [ -f .claude/index/sync_markdown.py ]; then
        python3 .claude/index/sync_markdown.py info >/dev/null 2>&1 || true
      fi

# 環境変数設定
env:
  CLAUDE_HOOKS_ENABLED: true
  CLAUDE_PROJECT_ROOT: $PWD
  CLAUDE_MEMORY_BANK_OPTIMIZED: true  # 最適化版を使用